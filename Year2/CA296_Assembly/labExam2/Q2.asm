; this is good, but quite hard to detect what the procedure is doing and what
; the main program is doing.
; good effort, and nice code.
; Q2.asm
; Enter your name here: Vincent Achukwu
; Enter your ID here: 17393546

; Code goes below this point.


ORG 0
MOV AL,72		; INDEX/POINTER TO START OF NUMBERS
MOV BL,2		; STARTING NUMBER
LOOP:
	MOV [AL],BL	; ADD BL INTO MEMORY ADDRESS AL POINTING TO
	INC BL		; INCREMENT BL TO NEXT VALUE
	INC AL		; INCREMENT AL TO NEXT INDEX
	CMP AL,91	; CHECK IF WE REACHED OUR LIMIT
	JNZ LOOP	; JUMP WHILE WE HAVEN'T REACHED END
MOV BL,72		; THIS WILL BE OUR STARTING INDEX
START:
	CALL 19		; CALLS PROCEDURE
	JMP START	; KEEPS LOOPING UNTIL PROCEDURE ENDS

MOV AL,[BL]		; PUTS WHATEVER IS IN [BL] INTO AL
PUSH AL			; SAVE AL
MOD AL,5		; CHECKS IF IT IS DIVISIBLE BY 5
JNZ NOT_DIVISIBLE	; IF NOT, WE STORE 0 IN THE MEMORY ADDRESS
			
DIVISIBLE:		; ELSE, WE DON'T CHANGE THE VALUES IN MEMORY ADDRESS.
	POP AL		; RESTORES AL
	MOV [BL],AL	; ADDS IT INTO MEMORY ADDRESS
	INC BL		; INCREMENT INDEX
	CMP BL,91
	JZ FINISHED	; IF WE REACHED END WE FINISH
	RET		; ELSE RETURN TO CALL PROCEDURE AGAIN

NOT_DIVISIBLE:
	MOV AL,0	; UPDATE VALUES IN MEMORY TO 0
	MOV [BL],AL
	POP AL
	INC BL
	CMP BL,91
	JZ FINISHED
	RET

FINISHED:
	END